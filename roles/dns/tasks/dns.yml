# vim: ts=2 sw=2 expandtab ai
---
- name: find connection profile
  shell: |
    UUID=$(nmcli --fields uuid,device c show | grep "{{ ansible_default_ipv4.alias }} *$" | cut -d ' ' -f 1);
    echo "uuid: $UUID"
  register: out_profile
  changed_when: false

- set_fact:
    out_profile: "{{ out_profile.stdout | from_yaml }}"

- name: ensure NetworkManager protects resolv.conf
  shell: |
    nmcli c show "{{ out_profile.uuid }}" | grep -i -e ipv4.ignore-auto-dns: -e ipv4.dns: | cut -d. -f 2-
  changed_when: false
  register: out_nmcli

- set_fact:
    out_nmcli: "{{ out_nmcli.stdout | from_yaml }}"

- name: copy local resolv to dnsmasq resolv
  when: |
    internal_ip not in out_nmcli.dns and not out_nmcli['ignore-auto-dns']
  copy:
    src: /etc/resolv.conf
    dest: /etc/dnsmasq.resolv
    remote_src: true
  notify: restart network

- name: point dns locally
  command: "/usr/bin/nmcli c modify '{{ out_profile.uuid }}' -ipv4.dns '' ipv4.dns {{ internal_ip }} ipv4.ignore-auto-dns yes"
  when: |
    internal_ip not in out_nmcli.dns and not out_nmcli['ignore-auto-dns']
  notify: restart network

- name: copy dnsmasq config file
  template:
    src: templates/dnsmasq.conf.j2
    dest: /etc/dnsmasq.conf
  notify:
    - restart dnsmasq

- name: ensure hosts file has fqdn
  blockinfile:
    path: /etc/hosts
    block: |
      {% for hn in groups.ec2 %}
      {% if 'internal_ip' in hostvars[hn] %}
      {% if hn in groups.haproxy %}
      {{ hostvars[hn].internal_ip }}  {{ hn }} {{ openshift_master_cluster_hostname }} {{ openshift_master_default_subdomain }}
      {% else %}
      {{ hostvars[hn].internal_ip }}  {{ hn }}
      {% endif %}
      {% endif %}
      {% endfor %}
  notify:
    - refresh facts

- meta: flush_handlers

- name: ensure dnsmasq has started
  systemd:
    name: dnsmasq
    daemon_reload: true
    enabled: true
    state: started
