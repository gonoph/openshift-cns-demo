# vim: ts=2 sw=2 expandtab ai
---
- name: ensure /etc/haproxy exists
  file:
    path: /etc/haproxy
    state: directory
    owner: root
    group: root
    follow: true
    mode: 0755

- name: copy haproxy.cfg
  template:
    src: templates/haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg
  notify:
    - restart haproxy

- name: copy haproxy services file
  template:
    src: haproxy.service.j2
    dest: /etc/systemd/system/haproxy.service
  notify:
    - restart haproxy

- name: check if custom ca exists
  connection: local
  stat:
    path: "{{ item }}"
  register: rhel_ca_stat
  when: item | length > 0
  with_items:
    - "{{ (openshift_hosted_router_certificate | default({})).cafile | default('') }}"
    - "{{ (openshift_master_ca_certificate | default({})).certfile | default('') }}"

- name: set rhel_ca_file
  set_fact:
    rhel_ca_file: "{{ rhel_ca_stat.results | selectattr('stat', 'defined') | selectattr('stat.exists') | map(attribute='item') | list | first | default('') }}"

- name: copy docker build files
  copy:
    src: "{{ item }}"
    dest: "{{ certserv_build_dir }}/ca.crt"
    mode: 0444
    owner: 100
    group: 100
  when: rhel_ca_file | length > 0
  register: certserv_copy_build
  with_items:
    - Dockerfile
    - certserv.py
    - "{{ rhel_ca_file }}"

- name: Build certserv image
  when: rhel_ca_file | length > 0
  docker_image:
    name: "{{ certserv_image }}"
    path: "{{ certserv_build_dir }}"
    force: "{{ certserv_copy_build is changed }}"
  notify:
    - restart certserv

- name: copy certserv services file
  when: rhel_ca_file | length > 0
  template:
    src: certserv.service.j2
    dest: /etc/systemd/system/certserv.service
  notify:
    - restart certserv

- meta: flush_handlers

- name: ensure haproxy has started
  systemd:
    name: haproxy
    state: started
    daemon_reload: true
    enabled: true

- name: ensure certserv has started
  ignore_errors: true
  systemd:
    name: certserv
    state: started
    daemon_reload: true
    enabled: "{{ rhel_ca_file | length > 0 }}"
