# vim: ts=2 sw=2 expandtab ai
---
- name: lookup vpc subnets
  run_once: true
  when: ec2_vpc_subnet is not defined and ec2_create
  ec2_vpc_subnet_facts:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ ec2_vpc_id }}"
  register: ec2_vpc_subnet_facts

- set_fact:
    ec2_vpc_subnet_facts: "{{ ec2_vpc_subnet_facts.subnets | first }}"
  when: ec2_vpc_subnet is not defined and ec2_create

- set_fact:
    ec2_vpc_subnet: "{{ ec2_vpc_subnet_facts.id }}"
    ec2_vpc_subnet_cidr_block: "{{ ec2_vpc_subnet_facts.cidr_block }}"
  run_once: true
  when: ec2_vpc_subnet is not defined and ec2_create

- name: ensure VPC Security Group is created
  when: ec2_create
  run_once: true
  ec2_group:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ ec2_region }}"
    name: "{{ ec2_security_group_name }}"
    description: Openshift Demo Security Group
    tags: "{{ ec2_security_group_tags }}"
    vpc_id: "{{ ec2_vpc_id }}"
    purge_rules: true
    purge_rules_egress: true
    rules: "{{ text_rules | from_yaml }}"
  vars:
    text_rules: |
      - proto: all
        from_port: 0
        to_port: 65535
        cidr_ip: {{ ec2_vpc_subnet_cidr_block }}
      {% for nw in ec2_mynetworks %}
      - proto: tcp
        ports:
          - 22
          - 80
          - 443
          - 8443
        cidr_ip: "{{ nw }}"
      {% endfor %}

- name: create instances
  when: ec2_create
  ec2:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ ec2_region }}"
    key_name: "{{ ec2_keypair }}"
    group: "{{ ec2_security_group_name }}"
    instance_type: "{{ ec2_instance_type }}"
    image: "{{ ec2_ami_image }}"
    wait: "{{ ec2_wait > 0 }}"
    wait_timeout: "{{ ec2_wait if ec2_wait > 0 else 1 }}"
    exact_count: 1
    instance_tags: "{{ ec2_tags }}"
    count_tag: "{{ ec2_tags }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet }}"
    assign_public_ip: "{{ ec2_public_ip }}"
    volumes: "{{ ec2_volumes }}"
    private_ip: "{{ private_ip | default(omit) }}"
  notify: Wait for SSH to come up

- name: get instances
  ec2_remote_facts:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ ec2_region }}"
    filters:
      "instance-state-name": running
      "tag:demo": ocp
      "tag:Name": "{{ inventory_hostname }}"
  register: ec2_instances

- set_fact:
    ansible_host: "{{ ( ec2_instances.instances | first | default({}) ).public_ip_address | default('')}}"
    public_ip: "{{ ( ec2_instances.instances | first | default({}) ).public_ip_address | default('')}}"
    internal_ip: "{{ ( ec2_instances.instances | first | default({}) ).private_ip_address | default('')}}"
    ec2_instance_ids: "{{ ec2_instances | json_query('instances[].id') }}"

- debug:
    var: ec2_facts
  vars:
    ec2_facts:
      internal_ip: "{{ internal_ip }}"
      ansible_host: "{{ ansible_host }}"
      ec2_instance_ids: "{{ ec2_instance_ids }}"
      ansible_user: "{{ ansible_user }}"

- name: destroy instances
  when: ec2_destroy and ec2_instance_ids | default(False)
  ec2:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ ec2_region }}"
    instance_ids: "{{ ec2_instance_ids }}"
    state: absent
