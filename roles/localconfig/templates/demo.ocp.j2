; vim: filetype=dosini
[OSEv3:children]
nodes
masters
etcd
glusterfs
glusterfs_registry
dns
# lb

[all:vars]
ansible_user=root

[OSEv3:vars]
openshift_release={{ openshift_release }}
openshift_image_tag={{ openshift_image_tag }}
openshift_deployment_type={{ openshift_deployment_type }}
openshift_disable_check=memory_availability,disk_availability
containerized=True
{% raw %}
openshift_hostname={{ inventory_hostname  }}
{% endraw %}

# will test this later
# openshift_cloudprovider_kind=aws
# openshift_cloudprovider_aws_access_key={{ aws_access_key }}
# openshift_cloudprovider_aws_secret_key={{ aws_secret_key }}
# if defning the above, then comment out below
openshift_master_ingress_ip_network_cidr=172.250.0.0/16

openshift_master_identity_providers=[{'name': 'htpasswd_auth', 'login': 'true', 'challenge': 'true', 'kind': 'HTPasswdPasswordIdentityProvider', 'filename': '/etc/origin/master/htpasswd'}]
# create these with: openssl passwd -apr1 <PASSWORD>
# admin: adminuser123
# demo: demouser123
openshift_master_htpasswd_users={'admin': '$apr1$slD.7Idv$RU9uQTc6xffBM8qaA4sSH/', 'demo': '$apr1$3Rp7gLp6$L6jBaTQtJ6zLuEJ85Pb9N0'}

{% if local_custom_certificates %}
openshift_master_ca_certificate={'certfile': '{{ easy_rsa_ocp_pki }}/ca-bundle.crt', 'keyfile': '{{ easy_rsa_ocp_pki }}/private/ca.key'}
{% endif %}

{% if groups.masters | length > 1 %}
openshift_master_cluster_method=native
openshift_master_cluster_hostname=ocp.{{ ocp_domain }}
openshift_master_cluster_public_hostname={{ ocp_hostname }} 
{% else %}
# openshift_master_cluster_method=native
# openshift_master_cluster_hostname=ocp.{{ ocp_domain }}
# openshift_master_cluster_public_hostname={{ ocp_hostname }} 
{% endif %}
openshift_master_default_subdomain={{ ocp_app_domain }}

openshift_clock_enabled=True

openshift_metrics_install_metrics=true
openshift_metrics_image_version=v{{ openshift_release }}

openshift_service_catalog_image_version=v{{ openshift_release }}

openshift_logging_install_logging=false
# openshift_hosted_logging_hostname=kibana.apps.{{ ocp_domain }} 
openshift_logging_kibana_hostname=kibana.apps.{{ ocp_domain }}
openshift_master_logging_public_url=https://kibana.apps.{{ ocp_domain }}
openshift_hosted_metrics_public_url=https://hawkular-metrics.apps.{{ ocp_domain }}/hawkular/metrics
# openshift_logging_kibana_proxy_debug=True

ansible_service_broker_image_version=v{{ openshift_release }}
openshift_template_service_broker_namespaces=['openshift']

openshift_schedulable=True
openshift_node_labels={'region': 'infra', 'zone': 'default'}

openshift_storage_glusterfs_storageclass_default=True
{% raw %}
openshift_ip={{ internal_ip }}
openshift_public_ip={{ public_ip }}
{% endraw %}

# XXX don't really need this
# openshift_dns_ip=172.200.0.1
openshift_portal_net=172.200.0.0/16

[dns]
{% for node in groups.dns %}
{{ hostvars[node].hostname }} docker_storage_dev='' internal_ip={{ hostvars[node].internal_ip }} public_ip={{ hostvars[node].public_ip }}
{% endfor %}

[masters]
{% for master in groups.masters %}
{{ hostvars[master].hostname }} internal_ip={{ hostvars[master].internal_ip }} public_ip={{ hostvars[master].ansible_host }}
{% endfor %}

[etcd]
{% for master in groups.masters %}
{{ hostvars[master].hostname }}
{% endfor %}

[nodes]
{% for node in groups.nodes %}
{% if node in groups.masters %}
{{ hostvars[node].hostname }} openshift_node_labels="{'region': 'master', 'zone': 'default', 'openshift-infra': 'apiserver'}" openshift_schedulable=False
{% else %}
{{ hostvars[node].hostname }} internal_ip={{ hostvars[node].internal_ip }} public_ip={{ hostvars[node].ansible_host }}
{% endif %}
{% endfor %}

[glusterfs]
{% for node in groups.storage %}
{{ hostvars[node].hostname }} glusterfs_devices='{{ hostvars[node].storage_devices | to_json}}'
{% endfor %}

[glusterfs_registry]
{% for node in groups.storage %}
{{ hostvars[node].hostname }} glusterfs_devices='{{ hostvars[node].storage_devices | to_json}}'
{% endfor %}
