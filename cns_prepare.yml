# vim: ts=2 sw=2 expandtab ai
---
- name: get EC2 instances
  any_errors_fatal: true
  force_handlers: true
  hosts: ec2
  gather_facts: false
  connection: local
  tags: [ ec2 ]
  roles:
    - ec2

- name: setup CNS topology
  any_errors_fatal: true
  force_handlers: true
  hosts: storage
  gather_facts: true
  tags: [ cns ]
  tasks:
    - name: create CNS topolgy from template
      run_once: true
      connection: local
      template:
        src: topology.yml.j2
        dest: /tmp/topology.yml
        mode: 0600
        force: true

    - name: convert topology yaml to json
      run_once: true
      connection: local
      copy:
        content: "{{ lookup('file', '/tmp/topology.yml') | from_yaml | to_json }}"
        dest: /tmp/topology.json

    - name: check storage namespace
      connection: local
      run_once: true
      command: /usr/bin/oc get namespace storage
      register: storage_out
      failed_when: "storage_out.rc != 0 and 'NotFound' not in storage_out.stderr"
      changed_when: "'NotFound' in storage_out.stderr"

    - name: create storage namespace
      connection: local
      run_once: true
      command: /usr/bin/oc new-project storage
      when: storage_out.changed

    - name: make sure storage project can run as privileged
      connection: local
      run_once: true
      changed_when: false
      command: /usr/bin/oc adm policy add-scc-to-user privileged system:serviceaccount:storage:default

    - name: create template for gluster endpoints
      connection: local
      run_once: true
      template:
        src: gluster-cluster.yml.j2
        dest: /tmp/gluster-cluster.yml

    - name: import gluster endpoints
      connection: local
      run_once: true
      register: oc_out
      failed_when: "oc_out.rc != 0 and 'AlreadyExists' not in oc_out.stderr"
      changed_when: oc_out.rc == 0 
      command: /usr/bin/oc create -f /tmp/gluster-cluster.yml

    - name: determine clusterid
      connection: local
      run_once: true
      uri:
        url: "http://heketi-storage.{{ openshift_master_default_subdomain }}/clusters"
        return_content: true
      register: clusterid_out

    - name: set clusterid
      connection: local
      run_once: true
      set_fact:
        heketi_clusterid: "{{ clusterid_out.json.clusters | first }}"

    - name: write out storageclass file
      connection: local
      run_once: true
      template:
        src: cns-storageclass.yml.j2
        dest: /tmp/cns-storageclass.yml

    - name: import storagelcass
      connection: local
      run_once: true
      register: oc_out
      failed_when: "oc_out.rc != 0 and 'AlreadyExists' not in oc_out.stderr"
      changed_when: oc_out.rc == 0 
      command: /usr/bin/oc create -f /tmp/cns-storageclass.yml

    - name: remove firewall rule for gluster
      lineinfile:
        path: /etc/sysconfig/iptables
        state: absent
        regexp: "^-A INPUT -j REJECT --reject-with icmp-host-prohibited"

    - name: remove runtime firewall rule
      command: /usr/sbin/iptables -D INPUT -j REJECT --reject-with icmp-host-prohibited
      register: iptables_out
      failed_when: "iptables_out.rc != 0 and 'iptables: No chain/target/match by that name.' not in iptables_out.stderr_lines"
      changed_when: iptables_out.rc == 0
