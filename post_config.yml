# vim: ts=2 sw=2 expandtab ai
---

- name: post configuration - setup users and local cli
  any_errors_fatal: true
  force_handlers: true
  hosts: masters
  gather_facts: true
  tags: [ post ]

  tasks:
    - name: add admin user as cluster admin
      become: true
      run_once: true
      command: /usr/local/bin/oc adm policy add-cluster-role-to-user cluster-admin admin

    - name: copy ca.crt to localhost
      become: true
      run_once: true
      fetch:
        src: /etc/origin/master/ca.crt
        dest: /tmp/ocp-ca.crt
        flat: yes

    - name: move ocp-ca.crt into ca-trusts
      become: true
      run_once: true
      connection: local
      register: move_ca
      copy:
        src: /tmp/ocp-ca.crt
        dest: /etc/pki/ca-trust/source/anchors/ocp-ca.crt

    - name: update ca trusts
      when: move_ca.changed
      connection: local
      become: true
      run_once: true
      command: update-ca-trust

    - name: login locally to ocp master as admin
      connection: local
      run_once: true
      # command: "/usr/bin/oc login --certificate-authority=/etc/pki/ca-trust/source/anchors/ocp-ca.crt https://{{ groups.masters | first }}:8443 -u admin -p adminuser123"
      command: "/usr/bin/oc login https://{{ groups.masters | first }}:8443 -u admin -p adminuser123"

    - name: remote copy admin config from root
      when: ansible_user != 'root'
      become: true
      command: "/usr/bin/cp -ar /root/.kube/ {{ ansible_user_dir }}/.kube/"

    - name: remote set permissions on config
      when: ansible_user != 'root'
      become: true
      file:
        recurse: true
        group: "{{ ansible_user_id }}"
        owner: "{{ ansible_user_id }}"
        path: "{{ ansible_user_dir }}/.kube/"

- name: post configuration - give sane defaults for glusterfs
  any_errors_fatal: true
  force_handlers: true
  hosts: masters
  gather_facts: true
  tags: [ glusterfs ]
  vars:
    ansible_service_broker_namespace: openshift-ansible-service-broker
    default_openshift_storage_glusterfs_namespace: glusterfs
    default_openshift_storage_glusterfs_name: storage
    storage_class_patch: '{"metadata": {"annotations": {"storageclass.beta.kubernetes.io/is-default-class": "true"} } }'

  tasks:

    - name: set glusterfs namespace and prefix
      set_fact:
        gns: "{{ openshift_storage_glusterfs_namespace | default(default_openshift_storage_glusterfs_namespace) }}"
        gname: "{{ openshift_storage_glusterfs_name | default(default_openshift_storage_glusterfs_name) }}"
        ans: "{{ ansible_service_broker_namespace }}"
        ans_check: 'Error from server (NotFound): namespaces "{{ ansible_service_broker_namespace }}" not found'

    - name: Storage - check if there is a default StorageClass
      run_once: true
      connection: local
      register: storage_class_out
      command: "/usr/bin/oc get storageclass -n {{ gns }}"
      changed_when: "'(default)' not in storage_class_out.stdout"

    - name: Storage - set patch when statement check
      set_fact:
        storage_patch_when_str: 'storageclass "glusterfs-{{ gname }}" patched'

    - name: Storage - patch StorageClass to make GlusterFS the default
      run_once: true
      connection: local
      when: storage_class_out is changed
      command: "/usr/bin/oc patch -n {{ gns}} storageclass glusterfs-{{ gname }} -p '{{ storage_class_patch }}'"
      register: storage_patch_out
      failed_when: "storage_patch_when_str not in storage_patch_out.stdout"

    - name: Ansible Service Broker - check if namespace exists
      run_once: true
      connection: local
      command: "/usr/bin/oc get project {{ ans }}"
      register: asb_out
      changed_when: ans_check in asb_out.stderr_lines

    - block:

      - name: Ansible Service Broker - check that etcd PVC has a storageclass or is bound
        run_once: true
        connection: local
        command: "/usr/bin/oc get pvc -n {{ ans }} etcd -o json"
        changed_when: false
        register: asb_pvc_out

      - name: Ansible Service Broker - set etcd pvc fact
        set_fact:
          asb_pvc_ok: "{{ tmp.status.phase != 'Pending' or 'storageClassName' in tmp.spec }}"
        run_once: true
        connection: local
        vars:
          tmp: "{{ asb_pvc_out.stdout | from_json }}"

      - name: Ansible Service Broker - export the etcd PVC
        run_once: true
        connection: local
        register: asb_export
        when: not asb_pvc_ok
        command: "/usr/bin/oc export pvc -n {{ ans }} etcd -o json"

      - name: Ansible Service Broker - delete the etcd PVC
        run_once: true
        connection: local
        register: asb_copy
        when: not asb_pvc_ok
        command: "/usr/bin/oc delete pvc -n {{ ans }} etcd"

      - name: Ansible Service Broker - recreate the etcd PVC
        run_once: true
        connection: local
        when: not asb_pvc_ok
        script: "/usr/bin/oc create -n {{ ans }} -f - <<< '{{asb_export.stdout}}'"

      - name: Ansible Service Broker - check if ASB deployment has stopped
        run_once: true
        connection: local
        register: asb_error
        command: "/usr/bin//oc get pod -n {{ ans }} -l deploymentconfig={{item}}"
        changed_when: "'No resources found.' in asb_error.stderr_lines"
        with_items:
          - asb
          - asb-etcd

      - name: Ansible Service Broker - restart ASB deployments if they stopped
        run_once: true
        connection: local
        when: item is changed
        command: "/usr/bin//oc rollout latest -n {{ ans }} dc/{{item.item}}"
        with_items: "{{ asb_error.results }}"
        loop_control:
          label: "/usr/bin//oc rollout latest -n {{ ans }} dc/{{item.item}}"

      - name: Ansible Service Broker - clean up Error pods if they exist
        run_once: true
        connection: local
        register: asb_clean
        script: |
          /usr/bin//oc get -n {{ ans }} pod | grep '\bError\b' | cut -d ' ' -f 1 | xargs /usr/bin/oc delete -n {{ ans }} pod
        failed_when: asb_clean.rc != 0 and 'but no name' not in asb_clean.stderr
        changed_when: asb_clean.rc == 0

      when: asb_out is not changed
